grammar Logic

  include StringGrammar

  rule decision
     binary_decision / unary_decision / comparative_decission
  end

  rule comparative_decission
    head:primary
    tail:(
      space mi_operator:equality_op
      space operand:primary)* <BinaryOperation>
  end

  rule equality_op
    '==' {
      def apply(a, b)
         
        a == b
      end
    }
    /
    '!=' {
      def apply(a, b)
         
        a != b
      end
    }
    /
    '<' {
      def apply(a, b)
         
        a < b
      end
    }
  end

  rule primary
    string_returning_op
    /
    number_var <NumberVar>
    /
    number   
  end

  rule number
    ([1-9] [0-9]* / '0') {
      def evaluate(env={})
        text_value.to_i
      end
    }
  end

  rule binary_decision
    operand_1:unary_decision space
    operator space
    operand_2:decision <BinaryDecision>
  end

  rule unary_decision
    negation / boolean_var <BooleanVar> / parenthesized
  end

  rule negation
    space?
    'not' space operand:unary_decision <Negation>
  end

  rule parenthesized
    '(' space? contents:decision space? ')' <Parenthesized>
  end

  rule operator
    'and' <And>
    /
    'or' <Or>
    /
    'xor' <Xor>
  end

end
